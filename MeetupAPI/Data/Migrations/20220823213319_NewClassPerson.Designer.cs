// <auto-generated />
using System;
using MeetupAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetupAPI.Data.Migrations
{
    [DbContext(typeof(MeetupDbContext))]
    [Migration("20220823213319_NewClassPerson")]
    partial class NewClassPerson
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MeetupAPI.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hous")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Первый",
                            Hous = 11,
                            Street = "Первая"
                        },
                        new
                        {
                            Id = 2,
                            City = "Второй",
                            Hous = 22,
                            Street = "Вторая"
                        });
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Meetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Meetups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2031, 11, 11, 11, 11, 11, 0, DateTimeKind.Unspecified),
                            Description = "Описание первого мероприятия",
                            Title = "Первое мероприятие",
                            Topic = "Тема первого мероприятия"
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2032, 12, 22, 22, 22, 22, 0, DateTimeKind.Unspecified),
                            Description = "Описание второго мероприятия",
                            Title = "Второе мероприятие",
                            Topic = "Тема второго мероприятия"
                        });
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Organizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetupId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationOrTopic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Organization");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId");

                    b.ToTable("Organizers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Первый",
                            LastName = "First",
                            MeetupId = 1,
                            OrganizationOrTopic = "Первая организация"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Второй",
                            LastName = "Second",
                            MeetupId = 1,
                            OrganizationOrTopic = "Вторая организация"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Третий",
                            LastName = "Third",
                            MeetupId = 2,
                            OrganizationOrTopic = "Третья организация"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Четвёртый",
                            LastName = "Fourth",
                            MeetupId = 2,
                            OrganizationOrTopic = "Четвёртая организация"
                        });
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId");

                    b.ToTable("Plans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Item = "Первый",
                            MeetupId = 1
                        },
                        new
                        {
                            Id = 2,
                            Item = "Второй",
                            MeetupId = 1
                        },
                        new
                        {
                            Id = 3,
                            Item = "Первый",
                            MeetupId = 2
                        },
                        new
                        {
                            Id = 4,
                            Item = "Второй",
                            MeetupId = 2
                        });
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeetupId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationOrTopic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId");

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Первый",
                            LastName = "First",
                            MeetupId = 1,
                            OrganizationOrTopic = "Первая тема"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Второй",
                            LastName = "Second",
                            MeetupId = 1,
                            OrganizationOrTopic = "Вторая тема"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Третий",
                            LastName = "Third",
                            MeetupId = 2,
                            OrganizationOrTopic = "Третья тема"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Четвёртый",
                            LastName = "Fourth",
                            MeetupId = 2,
                            OrganizationOrTopic = "Четвёртая тема"
                        });
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Address", b =>
                {
                    b.HasOne("MeetupAPI.Data.Models.Meetup", "Meetup")
                        .WithOne("Address")
                        .HasForeignKey("MeetupAPI.Data.Models.Address", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meetup");
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Organizer", b =>
                {
                    b.HasOne("MeetupAPI.Data.Models.Meetup", "Meetup")
                        .WithMany("Organizers")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meetup");
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Plan", b =>
                {
                    b.HasOne("MeetupAPI.Data.Models.Meetup", "Meetup")
                        .WithMany("Plan")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meetup");
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Speaker", b =>
                {
                    b.HasOne("MeetupAPI.Data.Models.Meetup", "Meetup")
                        .WithMany("Speakers")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meetup");
                });

            modelBuilder.Entity("MeetupAPI.Data.Models.Meetup", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Organizers");

                    b.Navigation("Plan");

                    b.Navigation("Speakers");
                });
#pragma warning restore 612, 618
        }
    }
}
